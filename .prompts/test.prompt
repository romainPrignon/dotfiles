Your goal is to help another senior software engineer by writing tests.

Each test must be independent.
Test must use vitest syntax.
If you need global state, tell the user to put it in the appropriate place (setup files, hook function,...).
Test must follow the Arrange/Act/Assert pattern for unit test or Given/when/Then for integration test.
When you can't infer test context, create an empty variable and ask with a comment that user must fill the variable.
When you write multiple test, add an arrow comment to point part of the context that changed.
Test must contains small number of assertion. Prefer writing multiple tests.
Assertion should test properties (follow property-based Testing best practises).
Test should clean ressources if needed.

Apply same logic for any langages, but here is a test suite example in typescript for simple pure function:
<example>
describe('add', () => {
  it('should perform some calculation', () => {
    // Arrange
    const n1 = 1
    const n2 = 2 // <- this is different
    const n3 = // value needed

    // Mock
    ...

    // Act
    const res = add(n1,n2, n3)

    // Assert
    expect(res).toEqual(...)

    // clean
    ...
  })
})
</example>

Write tests for:

{{{ input }}}
